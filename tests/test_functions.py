#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
import sys
import numpy as np
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    try:
        from src.utils.tiling import load_channels_from_files, prepare_multichannel_tile
        print("‚úì tiling –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        from src.clustering_methods.clustering_methods import cluster_tiles
        print("‚úì clustering_methods –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        from src.utils.worldcover import get_worldcover_legend
        print("‚úì worldcover –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        from src.vlm_adapters.openai_adapter import openai_vision_categorize
        print("‚úì openai_adapter –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        from src.vlm_adapters.claude_adapter import claude_vision_categorize
        print("‚úì claude_adapter –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_paths():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        # –¢–µ—Å—Ç –¥–ª—è method_2
        timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        method_2_path = f"tests/final_test/method_2/{timestamp}"
        os.makedirs(method_2_path, exist_ok=True)
        print(f"‚úì –°–æ–∑–¥–∞–Ω –ø—É—Ç—å –¥–ª—è method_2: {method_2_path}")
        
        # –¢–µ—Å—Ç –¥–ª—è method_1
        method_1_path = f"tests/final_test/method_1/{timestamp}"
        os.makedirs(method_1_path, exist_ok=True)
        print(f"‚úì –°–æ–∑–¥–∞–Ω –ø—É—Ç—å –¥–ª—è method_1: {method_1_path}")
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ–π: {e}")
        return False

def test_data_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        folder = '../cropped_images'  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å
        base_name = 'cropped_T36TWS_20230605T083601'
        channels = ["B02", "B03", "B04"]
        tile_size = 256  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
        x0, y0 = 100, 100
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        for channel in channels:
            file_path = os.path.join(folder, f"{base_name}_{channel}_20m.tif")
            if not os.path.exists(file_path):
                print(f"‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return False
        
        print("‚úì –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–Ω–∞–ª–æ–≤
        from src.utils.tiling import load_channels_from_files
        tile_dict = load_channels_from_files(folder, base_name, channels, tile_size=tile_size, x0=x0, y0=y0)
        
        if tile_dict and all(channel in tile_dict for channel in channels):
            print("‚úì –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_clustering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é"""
    try:
        from src.clustering_methods.clustering_methods import cluster_tiles
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = np.random.rand(100, 100, 3)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º kmeans
        result = cluster_tiles([test_data], method="kmeans", n_clusters=3)
        
        if result and 'mask' in result:
            print("‚úì –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è kmeans —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚úó –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞ ===\n")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–µ–π", test_paths),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", test_data_loading),
        ("–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è", test_clustering),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        if test_func():
            passed += 1
            print(f"‚úì {test_name} –ø—Ä–æ–π–¥–µ–Ω")
        else:
            print(f"‚úó {test_name} –ø—Ä–æ–≤–∞–ª–µ–Ω")
    
    print(f"\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")

if __name__ == "__main__":
    main() 